[{"/Users/jun/Documents/uber-eats-frontend/src/index.tsx":"1","/Users/jun/Documents/uber-eats-frontend/src/reportWebVitals.ts":"2","/Users/jun/Documents/uber-eats-frontend/src/App.tsx":"3","/Users/jun/Documents/uber-eats-frontend/src/apollo.ts":"4","/Users/jun/Documents/uber-eats-frontend/src/routers/logged-out-router.tsx":"5","/Users/jun/Documents/uber-eats-frontend/src/routers/logged-in-router.tsx":"6","/Users/jun/Documents/uber-eats-frontend/src/pages/login.tsx":"7","/Users/jun/Documents/uber-eats-frontend/src/pages/create-account.tsx":"8","/Users/jun/Documents/uber-eats-frontend/src/components/form.error.tsx":"9","/Users/jun/Documents/uber-eats-frontend/src/components/button.tsx":"10","/Users/jun/Documents/uber-eats-frontend/src/__generated__/globalTypes.ts":"11","/Users/jun/Documents/uber-eats-frontend/src/constants.ts":"12","/Users/jun/Documents/uber-eats-frontend/src/pages/client/restaurant.tsx":"13","/Users/jun/Documents/uber-eats-frontend/src/pages/404.tsx":"14","/Users/jun/Documents/uber-eats-frontend/src/components/header.tsx":"15","/Users/jun/Documents/uber-eats-frontend/src/hooks/useMe.tsx":"16"},{"size":789,"mtime":1611200830523,"results":"17","hashOfConfig":"18"},{"size":425,"mtime":1610350482334,"results":"19","hashOfConfig":"18"},{"size":397,"mtime":1610798431569,"results":"20","hashOfConfig":"18"},{"size":1203,"mtime":1611202938649,"results":"21","hashOfConfig":"18"},{"size":667,"mtime":1611215664702,"results":"22","hashOfConfig":"18"},{"size":949,"mtime":1611226633895,"results":"23","hashOfConfig":"18"},{"size":5338,"mtime":1611202930701,"results":"24","hashOfConfig":"18"},{"size":6027,"mtime":1611215293454,"results":"25","hashOfConfig":"18"},{"size":233,"mtime":1610866993965,"results":"26","hashOfConfig":"18"},{"size":572,"mtime":1611147351722,"results":"27","hashOfConfig":"18"},{"size":706,"mtime":1611226970132,"results":"28","hashOfConfig":"18"},{"size":41,"mtime":1611200272144,"results":"29","hashOfConfig":"18"},{"size":82,"mtime":1611210169562,"results":"30","hashOfConfig":"18"},{"size":556,"mtime":1611216037445,"results":"31","hashOfConfig":"18"},{"size":2142,"mtime":1611227347605,"results":"32","hashOfConfig":"18"},{"size":303,"mtime":1611226946252,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1d41hp9",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"/Users/jun/Documents/uber-eats-frontend/src/index.tsx",[],["69","70"],"/Users/jun/Documents/uber-eats-frontend/src/reportWebVitals.ts",[],"/Users/jun/Documents/uber-eats-frontend/src/App.tsx",[],"/Users/jun/Documents/uber-eats-frontend/src/apollo.ts",[],"/Users/jun/Documents/uber-eats-frontend/src/routers/logged-out-router.tsx",[],"/Users/jun/Documents/uber-eats-frontend/src/routers/logged-in-router.tsx",[],"/Users/jun/Documents/uber-eats-frontend/src/pages/login.tsx",["71","72"],"import { gql, useMutation } from \"@apollo/client\";\nimport React from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { useForm } from \"react-hook-form\";\nimport { Link } from \"react-router-dom\";\nimport { authTokenVar, isLoggedInVar } from \"../apollo\";\nimport { Button } from \"../components/button\";\nimport { FormError } from \"../components/form.error\";\nimport { LOCAL_TOKEN } from \"../constants\";\nimport UberLogo from \"../images/logo.svg\";\nimport {\n    loginMutation,\n    loginMutationVariables,\n} from \"../__generated__/loginMutation\";\n\nconst LOGIN_MUTATION = gql`\n    mutation loginMutation($loginInput: LoginInput!) {\n        login(input: $loginInput) {\n            ok\n            error\n            token\n        }\n    }\n`;\n\ninterface ILoginForm {\n    email: string;\n    password: string;\n}\n\nexport const Login = () => {\n    const {\n        register,\n        getValues,\n        errors,\n        handleSubmit,\n        formState,\n    } = useForm<ILoginForm>({ mode: \"onChange\" });\n    const onCompleted = (data: loginMutation) => {\n        const {\n            login: { ok, token },\n        } = data;\n        if (ok && token) {\n            localStorage.setItem(LOCAL_TOKEN, token);\n            authTokenVar(token);\n            isLoggedInVar(true);\n        }\n    };\n    const [loginMutation, { data: loginMutaionResult, loading }] = useMutation<\n        loginMutation,\n        loginMutationVariables\n    >(LOGIN_MUTATION, {\n        onCompleted,\n    });\n    const onSubmit = () => {\n        if (!loading) {\n            const { email, password } = getValues();\n            loginMutation({\n                variables: {\n                    loginInput: {\n                        email,\n                        password,\n                    },\n                },\n            });\n        }\n    };\n\n    return (\n        <div className=\"h-screen flex items-center flex-col mt-8 lg:mt-24\">\n            <Helmet>\n                <title>Login | Uber Eats</title>\n            </Helmet>\n            <div className=\" w-full max-w-screen-sm flex flex-col items-center px-5\">\n                <img\n                    src={UberLogo}\n                    alt=\"logo\"\n                    className=\"w-48 mb-10 lg:mb-16\"\n                />\n                <div className=\"w-full mb-8\">\n                    <h3 className=\" text-2xl lg:text-3xl text-gray-600 font-medium\">\n                        돌아오신 것을 환영합니다\n                    </h3>\n                </div>\n                <div className=\"w-full text-gray-700 font-medium\">\n                    <h5>이메일 주소로 로그인하세요.</h5>\n                </div>\n                <form\n                    onSubmit={handleSubmit(onSubmit)}\n                    className=\"grid gap-3 mt-3  w-full mb-5\"\n                >\n                    <input\n                        ref={register({\n                            required: \"Email is required\",\n                            pattern: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n                        })}\n                        type=\"email\"\n                        name=\"email\"\n                        placeholder=\"이메일\"\n                        required\n                        className=\"input\"\n                    />\n\n                    {errors.email?.message && (\n                        <FormError errorMessage={errors.email?.message} />\n                    )}\n                    {errors.email?.type === \"pattern\" && (\n                        <FormError\n                            errorMessage={\"이메일이 유효하지 않습니다\"}\n                        />\n                    )}\n                    <input\n                        ref={register({\n                            required: \"Password is required\",\n                            minLength: 6,\n                        })}\n                        type=\"password\"\n                        name=\"password\"\n                        placeholder=\"비밀번호\"\n                        required\n                        className=\"input\"\n                    />\n                    {errors.password?.message && (\n                        <FormError errorMessage={errors.password?.message} />\n                    )}\n                    {errors.password?.type === \"minLength\" && (\n                        <FormError errorMessage=\"Password must be more than 6 chars.\" />\n                    )}\n                    <Button\n                        canClick={formState.isValid}\n                        loading={loading}\n                        actionText={\"로그인\"}\n                    />\n                    {loginMutaionResult?.login.error && (\n                        <FormError\n                            errorMessage={loginMutaionResult.login.error}\n                        />\n                    )}\n                </form>\n                <div>\n                    <span>Uber는 처음이신가요? </span>\n                    <Link to=\"/create-account\">\n                        <span className=\"text-lime-600 cursor-pointer hover:underline\">\n                            {\" \"}\n                            계정 만들기\n                        </span>\n                    </Link>\n                </div>\n            </div>\n        </div>\n    );\n};\n","/Users/jun/Documents/uber-eats-frontend/src/pages/create-account.tsx",["73","74"],"import { gql, useMutation } from \"@apollo/client\";\nimport React from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { useForm } from \"react-hook-form\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { Button } from \"../components/button\";\nimport { FormError } from \"../components/form.error\";\nimport UberLogo from \"../images/logo.svg\";\nimport {\n    createAccountMutation,\n    createAccountMutationVariables,\n} from \"../__generated__/createAccountMutation\";\nimport { UserRole } from \"../__generated__/globalTypes\";\n\nconst CREATE_ACCOUNT_MUTATION = gql`\n    mutation createAccountMutation($createAccountInput: CreateAccountInput!) {\n        createAccount(input: $createAccountInput) {\n            error\n            ok\n        }\n    }\n`;\n\ninterface ICreateAccountForm {\n    email: string;\n    password: string;\n    role: UserRole;\n}\n\nexport const CreateAccount = () => {\n    const {\n        register,\n        getValues,\n        errors,\n        handleSubmit,\n        formState,\n    } = useForm<ICreateAccountForm>({\n        mode: \"onChange\",\n        defaultValues: {\n            role: UserRole.Client,\n        },\n    });\n    const history = useHistory();\n    const onCompleted = (data: createAccountMutation) => {\n        const {\n            createAccount: { ok },\n        } = data;\n        if (ok) {\n            alert(\"Account Created! Login now\");\n            history.push(\"/\");\n        }\n    };\n    const [\n        createAccountMutaion,\n        { loading, data: createAccountMutationResult },\n    ] = useMutation<createAccountMutation, createAccountMutationVariables>(\n        CREATE_ACCOUNT_MUTATION,\n        { onCompleted }\n    );\n    const onSubmit = () => {\n        const { email, password, role } = getValues();\n        if (!loading) {\n            createAccountMutaion({\n                variables: {\n                    createAccountInput: {\n                        email,\n                        password,\n                        role,\n                    },\n                },\n            });\n        }\n    };\n\n    return (\n        <div className=\"h-screen flex items-center flex-col mt-8 lg:mt-24\">\n            <Helmet>\n                <title>Create Account | Uber Eats</title>\n            </Helmet>\n            <div className=\" w-full max-w-screen-sm flex flex-col items-center px-5\">\n                <img\n                    src={UberLogo}\n                    alt=\"logo\"\n                    className=\"w-48 mb-10 lg:mb-16\"\n                />\n                <div className=\"w-full mb-8\">\n                    <h3 className=\" text-2xl lg:text-3xl text-gray-600 font-medium\">\n                        시작하기\n                    </h3>\n                </div>\n                <div className=\"w-full text-gray-700 font-medium\">\n                    <h5>기본 정보 입력으로 회원가입하세요.</h5>\n                </div>\n                <form\n                    onSubmit={handleSubmit(onSubmit)}\n                    className=\"grid gap-3 mt-3  w-full mb-5\"\n                >\n                    <input\n                        ref={register({\n                            required: \"Email is required\",\n                            pattern: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n                        })}\n                        type=\"email\"\n                        name=\"email\"\n                        placeholder=\"이메일\"\n                        required\n                        className=\"input\"\n                    />\n\n                    {errors.email?.message && (\n                        <FormError errorMessage={errors.email?.message} />\n                    )}\n                    {errors.email?.type === \"pattern\" && (\n                        <FormError\n                            errorMessage={\"이메일이 유효하지 않습니다\"}\n                        />\n                    )}\n                    <input\n                        ref={register({\n                            required: \"Password is required\",\n                            minLength: 6,\n                        })}\n                        type=\"password\"\n                        name=\"password\"\n                        placeholder=\"비밀번호\"\n                        required\n                        className=\"input\"\n                    />\n                    {errors.password?.message && (\n                        <FormError errorMessage={errors.password?.message} />\n                    )}\n                    {errors.password?.type === \"minLength\" && (\n                        <FormError errorMessage=\"Password must be more than 6 chars.\" />\n                    )}\n                    <select\n                        name=\"role\"\n                        ref={register({ required: true })}\n                        className=\"input\"\n                    >\n                        {Object.keys(UserRole).map((role, index) => (\n                            <option key={index}>{role}</option>\n                        ))}\n                    </select>\n                    <Button\n                        canClick={formState.isValid}\n                        loading={loading}\n                        actionText={\"계정 만들기\"}\n                    />\n                    {createAccountMutationResult?.createAccount.error && (\n                        <FormError\n                            errorMessage={\n                                createAccountMutationResult?.createAccount.error\n                            }\n                        />\n                    )}\n                </form>\n                <div>\n                    <span>Already use Uber? </span>\n                    <Link to=\"/\">\n                        <span className=\"text-lime-600 cursor-pointer hover:underline\">\n                            {\" \"}\n                            Sign In\n                        </span>\n                    </Link>\n                </div>\n            </div>\n        </div>\n    );\n};\n","/Users/jun/Documents/uber-eats-frontend/src/components/form.error.tsx",[],"/Users/jun/Documents/uber-eats-frontend/src/components/button.tsx",[],"/Users/jun/Documents/uber-eats-frontend/src/__generated__/globalTypes.ts",[],"/Users/jun/Documents/uber-eats-frontend/src/constants.ts",[],"/Users/jun/Documents/uber-eats-frontend/src/pages/client/restaurant.tsx",[],"/Users/jun/Documents/uber-eats-frontend/src/pages/404.tsx",[],"/Users/jun/Documents/uber-eats-frontend/src/components/header.tsx",[],"/Users/jun/Documents/uber-eats-frontend/src/hooks/useMe.tsx",[],{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":95,"column":48,"nodeType":"81","messageId":"82","endLine":95,"endColumn":49,"suggestions":"83"},{"ruleId":"79","severity":1,"message":"80","line":95,"column":73,"nodeType":"81","messageId":"82","endLine":95,"endColumn":74,"suggestions":"84"},{"ruleId":"79","severity":1,"message":"80","line":101,"column":48,"nodeType":"81","messageId":"82","endLine":101,"endColumn":49,"suggestions":"85"},{"ruleId":"79","severity":1,"message":"80","line":101,"column":73,"nodeType":"81","messageId":"82","endLine":101,"endColumn":74,"suggestions":"86"},"no-native-reassign",["87"],"no-negated-in-lhs",["88"],"no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["89","90"],["91","92"],["93","94"],["95","96"],"no-global-assign","no-unsafe-negation",{"messageId":"97","fix":"98","desc":"99"},{"messageId":"100","fix":"101","desc":"102"},{"messageId":"97","fix":"103","desc":"99"},{"messageId":"100","fix":"104","desc":"102"},{"messageId":"97","fix":"105","desc":"99"},{"messageId":"100","fix":"106","desc":"102"},{"messageId":"97","fix":"107","desc":"99"},{"messageId":"100","fix":"108","desc":"102"},"removeEscape",{"range":"109","text":"110"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"111","text":"112"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"113","text":"110"},{"range":"114","text":"112"},{"range":"115","text":"110"},{"range":"116","text":"112"},{"range":"117","text":"110"},{"range":"118","text":"112"},[2907,2908],"",[2907,2907],"\\",[2932,2933],[2932,2932],[3154,3155],[3154,3154],[3179,3180],[3179,3179]]